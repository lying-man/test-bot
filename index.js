const { default: axios } = require("axios");
const { Bot, Keyboard, HttpError, GrammyError } = require("grammy");
const express = require("express");
const cors = require("cors");
require("dotenv").config();

const bot = new Bot(process.env.BOT_TOKEN);
const tgApi = "https://api.telegram.org/"; //POST

const PORT = process.env.PORT || 4000;

const app = express();

app.use(cors());

app.get("/api", (req, res) => res.json({ status: "working" }));

const categories = [
    { value: "Animals", text: "–ñ–∏–≤–æ—Ç–Ω—ã–µ" },
    { value: "Clothes", text: "–û–¥–µ–∂–¥–∞" },
    { value: "Sports", text: "–°–ø–æ—Ä—Ç" },
    { value: "Colors", text: "–¶–≤–µ—Ç–∞" },
    { value: "Family", text: "–°–µ–º—å—è" },
    { value: "Food", text: "–ï–¥–∞" },
    { value: "Human", text: "–ß–µ–ª–æ–≤–µ–∫" },
    { value: "House", text: "–î–æ–º" },
    { value: "Technology", text: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" },
    { value: "Materials", text: "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã" },
    { value: "Business", text: "–ë–∏–∑–Ω–µ—Å" }
];

let players = [];//{ id, first_name, category, actionChangeCategory, word }

let text = `
<b>üìå–ö–∏—Ç–∞–π—Å–∫–∏–π —Ç–∞–Ω–∫ WZ-121üìå</b>

–ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –∫–æ–¥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–µ–π—à–µ–π (–Ω–∞ 1916 –≥–æ–¥) –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–æ–µ–≤–æ–π –º–∞—à–∏–Ω—ã, –ø—Ä–∏–Ω—è—Ç–æ–µ –≤ —Ü–µ–ª—è—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏. –í–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Å—Ç–∞–ª–æ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –º–∞—à–∏–Ω. 

<u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å –≤–æ–∑–¥—É—Ö–∞</u>

<a href="https://fonwall.ru/search/?order=new&q=–∏–≥—Ä—ã">üëá–ò—Å—Ç–æ—á–Ω–∏–∫üëá</a>
`;

bot.command("speak", async (ctx) => {
    try {
        let req = `${tgApi}bot${process.env.BOT_TOKEN}/sendMessage?chat_id=-4098814280&text=${text}&parse_mode=HTML`
        let photo = `${tgApi}bot${process.env.BOT_TOKEN}/sendPhoto`;
        await axios.post(photo, {
            chat_id: "-4098814280",
            photo: "https://img3.fonwall.ru/o/ss/vehicle-weapon-tank-world-of-tanks-vnyu.jpeg?auto=compress&fit=resize&w=500&display=thumb",
            caption: text,
            parse_mode: "HTML"
        });
        // await ctx.reply("hear")
    } catch (e) {
        console.log(e);
    }

});

bot.command("start", async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å –∏–≥—Ä—É, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–∞–Ω–¥—É "/game"');
});

//start game
bot.command("game", async (ctx) => {
    const { id, first_name } = ctx.message.from;
    const keybd = await generateCategoryKeybd();
    players.push({ id, first_name, actionChangeCategory: true });
    await ctx.reply(`${first_name} –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏`, { reply_markup: keybd });
});

//set category words
bot.command("category", async (ctx) => {
    const { id, first_name } = ctx.message.from;
    
    //check user
    const reqUser = players.find(el => el.id === id);
    if (!reqUser) return await ctx.reply(`${first_name} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É`);

    const keybd = await generateCategoryKeybd();

    players = players.map(el => {
        if (el.id !== id) return el;
        return { ...el, actionChangeCategory: true }
    });

    await ctx.reply(`${first_name} –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏`, { reply_markup: keybd });
});

//send category value
bot.hears(categories.map(el => el.text), async (ctx) => {
    const { id, first_name } = ctx.message.from;

    //check user
    const reqUser = players.find(el => el.id === id);
    if (!reqUser) return await ctx.reply(`${first_name} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É`);

    if (reqUser.actionChangeCategory) {
        let findedCategory = categories.find(el => el.text === ctx.message.text);
        players = players.map(el => {
            if (el.id !== id) return el;
            return { ...el, category: findedCategory, actionChangeCategory: false }
        });
        await ctx.reply("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
        await getWord(ctx);
    }

});

//handle answer and send request on new random word
bot.on("msg", async (ctx) => {

    const { id, first_name } = ctx.message.from;
    const reqUser = players.find(el => el.id === id);
    if (!reqUser) return;

    //check empty category
    if (!reqUser.category) return await ctx.reply(`${first_name} –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);

    //check loaded word
    if (!reqUser.word) return;

    if (ctx.message.text.toLowerCase().trim() === reqUser.word.translation.toLowerCase().trim()) {
        await ctx.reply("–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ :)");
    } else {
        await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–µ–±–∞–ª–∏—Å—å –≤ –ø–µ—Ä–µ–≤–æ–¥–µ :(");
    }

    await ctx.reply("–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ...");
    await getWord(ctx);
    
});

//handle bot errors
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    }
});

//game - choose category - question - cancel - change category

async function generateCategoryKeybd() {
    const categoryKeybd = await new Keyboard()
    .text("–ñ–∏–≤–æ—Ç–Ω—ã–µ").text("–û–¥–µ–∂–¥–∞").text("–°–ø–æ—Ä—Ç").row()
    .text("–¶–≤–µ—Ç–∞").text("–°–µ–º—å—è").text("–ï–¥–∞").row()
    .text("–ß–µ–ª–æ–≤–µ–∫").text("–î–æ–º").text("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏").row()
    .text("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã").text("–ë–∏–∑–Ω–µ—Å").row().resized().oneTime();
    return categoryKeybd;
}

async function getWord(ctx) {
    let user = players.find(el => ctx.message.from.id === el.id);
    const { data } = await axios.get(`${process.env.API_PATH}?category=${user.category.value}`);

    //save random word to user
    players = players.map(el => {
        if (el.id !== ctx.message.from.id) return el;
        return { ...el, word: data };
    });

    await ctx.reply(`–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ *${data.word}*?`);
}

bot.start();
app.listen(PORT, () => console.log("Server launch"));

// {
//     message_id: 35,
//     from: {
//       id: 5687791980,
//       is_bot: false,
//       first_name: '–ú–∞—Ç–≤–µ–π',
//       username: 'RedisKa_00',
//       language_code: 'ru'
//     },
//     chat: {
//       id: -4098814280,
//       title: '–¢–∞–Ω–∫–∏ –Ω–∞—Ö',
//       type: 'group',
//       all_members_are_administrators: true
//     },
//     date: 1711885685,
//     text: 'esf'
//   }